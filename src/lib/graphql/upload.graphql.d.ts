/* 2e93d52d91929a20433e7dfd5b8e5bb9afb359de
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type InputMaybe<T> = Maybe<T>;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Upload: any;
};
export declare type Mutation = {
  __typename?: 'Mutation';
  singleUpload?: Maybe<Scalars['Boolean']>;
};
export declare type MutationSingleUploadArgs = {
  file: Scalars['Upload'];
};
export declare type Query = {
  __typename?: 'Query';
  hello: Scalars['String'];
};
export declare type UploadMutationVariables = Types.Exact<{
  file: Types.Scalars['Upload'];
}>;
export declare type UploadMutation = {
  __typename?: 'Mutation';
  singleUpload?: boolean | null | undefined;
};
export declare const UploadDocument: Apollo.DocumentNode;
export declare type UploadMutationFn = Apollo.MutationFunction<UploadMutation, UploadMutationVariables>;
/**
 * __useUploadMutation__
 *
 * To run a mutation, you first call `useUploadMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUploadMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [uploadMutation, { data, loading, error }] = useUploadMutation({
 *   variables: {
 *      file: // value for 'file'
 *   },
 * });
 */

export declare function useUploadMutation(baseOptions?: Apollo.MutationHookOptions<UploadMutation, UploadMutationVariables>): Apollo.MutationTuple<UploadMutation, Types.Exact<{
  file: any;
}>, Apollo.DefaultContext, Apollo.ApolloCache<any>>;
export declare type UploadMutationHookResult = ReturnType<typeof useUploadMutation>;
export declare type UploadMutationResult = Apollo.MutationResult<UploadMutation>;
export declare type UploadMutationOptions = Apollo.BaseMutationOptions<UploadMutation, UploadMutationVariables>;